" This must be fist
set nocompatible

set t_Co=256
set mouse=
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set textwidth=120

set linebreak
set display+=lastline


cmap w!! w !sudo tee % >/dev/null
nnoremap ; :
nmap <silent> ,/ :let @/=""<CR>
imap <C-k> <ESC>ddi
nmap <F3> :set nonumber!<CR>
nmap <F5> :NERDTreeToggle<CR>
noremap <F1> :ToggleMouse<CR>
inoremap <F1> <Esc>:ToggleMouse<CR>a
set pastetoggle=<F2>
noremap <TAB> :bn<CR>
noremap <S-TAB> :bp<CR>
noremap <C-F> :FufCoverageFile<CR>

let NERDTreeQuitOnOpen=1
let NERDTreeHighlightCursorLine=1
let NERDTreeMouseMode=2
let NERDTreeIgnore=['\.pyc$', '\~$']

filetype on
filetype plugin on
filetype indent on
syntax enable
au BufNewFile,BufRead *.wsgi set filetype=python

set hlsearch
set showmatch

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Tell vim to remember certain things when we exit
"  '10 : marks will be remembered for up to 10 previously edited files
"  "100 : will save up to 100 lines for each register
"  :20 : up to 20 lines of command-line history will be remembered
"  % : saves and restores the buffer list
"  n... : where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" when we reload, tell vim to restore the cursor to the saved position
augroup JumpCursorOnEdit
 au!
 autocmd BufReadPost *
 \ if expand("<afile>:p:h") !=? $TEMP |
 \ if line("'\"") > 1 && line("'\"") <= line("$") |
 \ let JumpCursorOnEdit_foo = line("'\"") |
 \ let b:doopenfold = 1 |
 \ if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
 \ let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
 \ let b:doopenfold = 2 |
 \ endif |
 \ exe JumpCursorOnEdit_foo |
 \ endif |
 \ endif
 " Need to postpone using "zv" until after reading the modelines.
 autocmd BufWinEnter *
 \ if exists("b:doopenfold") |
 \ exe "normal zv" |
 \ if(b:doopenfold > 1) |
 \ exe "+".1 |
 \ endif |
 \ unlet b:doopenfold |
 \ endif
augroup END

autocmd FileType javascript set softtabstop=3 shiftwidth=3
autocmd FileType html       set softtabstop=3 shiftwidth=3 textwidth=0

" Trailing or broken whitespace.
let c_space_errors=1
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
set backupcopy=auto,breakhardlink
